@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<section class="form-container" aria-label="Sign Up Form Section">
    <div class="form-container-div col-4">
        <!-- Header with Logo -->
        <div class="auth-header">
            <div class="logo-container">
                <img src="~/images/elhaq.jpg" alt="El7aq Logo" class="auth-logo" />
                <h2>Create Account</h2>
                <p class="auth-subtitle">Join El7aq and start your journey</p>
            </div>
        </div>

        <!-- Validation Summary -->
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert" style="display: none;">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <span id="validation-summary-text"></span>
        </div>

        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" novalidate>
            <!-- Name Fields -->
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-user"></i>
                            </span>
                            <input asp-for="Input.FirstName" 
                                   type="text" 
                                   placeholder="First Name" 
                                   aria-label="First Name" 
                                   class="form-control" 
                                   autocomplete="given-name"
                                   required />
                        </div>
                        <span asp-validation-for="Input.FirstName" class="text-danger validation-message"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-user"></i>
                            </span>
                            <input asp-for="Input.LastName" 
                                   type="text" 
                                   placeholder="Last Name" 
                                   aria-label="Last Name" 
                                   class="form-control" 
                                   autocomplete="family-name"
                                   required />
                        </div>
                        <span asp-validation-for="Input.LastName" class="text-danger validation-message"></span>
                    </div>
                </div>
            </div>

            <!-- Email Field -->
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-envelope"></i>
                    </span>
                    <input asp-for="Input.Email" 
                           type="email" 
                           placeholder="Email Address" 
                           aria-label="Email Address" 
                           class="form-control" 
                           autocomplete="email"
                           required />
                </div>
                <span asp-validation-for="Input.Email" class="text-danger validation-message"></span>
            </div>

            <!-- Password Field -->
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <input asp-for="Input.Password" 
                           type="password" 
                           placeholder="Password" 
                           aria-label="Password" 
                           class="form-control" 
                           autocomplete="new-password"
                           required />
                    <button type="button" class="btn btn-outline-secondary" id="togglePassword" title="Show/Hide Password">
                        <i class="fas fa-eye" id="togglePasswordIcon"></i>
                    </button>
                </div>
                <span asp-validation-for="Input.Password" class="text-danger validation-message"></span>
                <div class="password-strength mt-2" id="passwordStrength" style="display: none;">
                    <div class="strength-bar">
                        <div class="strength-fill" id="strengthFill"></div>
                    </div>
                    <small class="strength-text" id="strengthText"></small>
                </div>
            </div>

            <!-- Confirm Password Field -->
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <input asp-for="Input.ConfirmPassword" 
                           type="password" 
                           placeholder="Confirm Password" 
                           aria-label="Confirm Password" 
                           class="form-control" 
                           autocomplete="new-password"
                           required />
                    <button type="button" class="btn btn-outline-secondary" id="toggleConfirmPassword" title="Show/Hide Password">
                        <i class="fas fa-eye" id="toggleConfirmPasswordIcon"></i>
                    </button>
                </div>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger validation-message"></span>
            </div>

            <!-- Terms and Conditions -->
            <div class="form-check mb-4">
                <input class="form-check-input" type="checkbox" id="agreeTerms" required />
                <label class="form-check-label" for="agreeTerms">
                    I agree to the <a href="#" class="terms-link">Terms of Service</a> and <a href="#" class="terms-link">Privacy Policy</a>
                </label>
            </div>

            <!-- Submit Button -->
            <div class="form-group">
                <button id="registerSubmit" type="submit" class="btn btn-primary btn-lg w-100">
                    <span class="btn-text">Create Account</span>
                    <span class="btn-spinner" style="display: none;">
                        <i class="fas fa-spinner fa-spin me-2"></i>Creating Account...
                    </span>
                </button>
            </div>

            <!-- Divider -->
            <div class="divider">
                <span>or</span>
            </div>

            <!-- Sign In Link -->
            <div class="sub-text">
                Already have an account? 
                <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl" class="signin-link">
                    Sign In
                </a>
            </div>

        </form>
    </div>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Password toggle functionality
            const togglePassword = document.getElementById('togglePassword');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const passwordInput = document.querySelector('input[name="Input.Password"]');
            const confirmPasswordInput = document.querySelector('input[name="Input.ConfirmPassword"]');
            const togglePasswordIcon = document.getElementById('togglePasswordIcon');
            const toggleConfirmPasswordIcon = document.getElementById('toggleConfirmPasswordIcon');

            // Toggle password visibility
            if (togglePassword && passwordInput) {
                togglePassword.addEventListener('click', function() {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);
                    togglePasswordIcon.classList.toggle('fa-eye');
                    togglePasswordIcon.classList.toggle('fa-eye-slash');
                });
            }

            if (toggleConfirmPassword && confirmPasswordInput) {
                toggleConfirmPassword.addEventListener('click', function() {
                    const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    confirmPasswordInput.setAttribute('type', type);
                    toggleConfirmPasswordIcon.classList.toggle('fa-eye');
                    toggleConfirmPasswordIcon.classList.toggle('fa-eye-slash');
                });
            }

            // Password strength indicator
            const passwordStrength = document.getElementById('passwordStrength');
            const strengthFill = document.getElementById('strengthFill');
            const strengthText = document.getElementById('strengthText');

            if (passwordInput && passwordStrength) {
                passwordInput.addEventListener('input', function() {
                    const password = this.value;
                    const strength = calculatePasswordStrength(password);
                    updatePasswordStrength(strength);
                });
            }

            function calculatePasswordStrength(password) {
                let strength = 0;
                let feedback = [];

                if (password.length >= 8) strength += 1;
                else feedback.push('at least 8 characters');

                if (/[a-z]/.test(password)) strength += 1;
                else feedback.push('lowercase letters');

                if (/[A-Z]/.test(password)) strength += 1;
                else feedback.push('uppercase letters');

                if (/[0-9]/.test(password)) strength += 1;
                else feedback.push('numbers');

                if (/[^A-Za-z0-9]/.test(password)) strength += 1;
                else feedback.push('special characters');

                return { score: strength, feedback: feedback };
            }

            function updatePasswordStrength(strength) {
                if (passwordInput.value.length === 0) {
                    passwordStrength.style.display = 'none';
                    return;
                }

                passwordStrength.style.display = 'block';
                const percentage = (strength.score / 5) * 100;
                strengthFill.style.width = percentage + '%';

                let color, text;
                if (strength.score <= 2) {
                    color = '#dc3545';
                    text = 'Weak';
                } else if (strength.score <= 3) {
                    color = '#ffc107';
                    text = 'Fair';
                } else if (strength.score <= 4) {
                    color = '#17a2b8';
                    text = 'Good';
                } else {
                    color = '#28a745';
                    text = 'Strong';
                }

                strengthFill.style.backgroundColor = color;
                strengthText.textContent = text;
                strengthText.style.color = color;
            }

            // Form submission with loading state
            const form = document.getElementById('registerForm');
            const submitButton = document.getElementById('registerSubmit');
            const btnText = document.querySelector('.btn-text');
            const btnSpinner = document.querySelector('.btn-spinner');

            if (form && submitButton) {
                form.addEventListener('submit', function(e) {
                    // Check terms agreement
                    const agreeTerms = document.getElementById('agreeTerms');
                    if (!agreeTerms.checked) {
                        e.preventDefault();
                        alert('Please agree to the Terms of Service and Privacy Policy to continue.');
                        return;
                    }

                    submitButton.disabled = true;
                    btnText.style.display = 'none';
                    btnSpinner.style.display = 'inline';
                });
            }

            // Show validation summary if there are errors
            const validationSummary = document.querySelector('.alert-danger');
            const validationErrors = document.querySelectorAll('.validation-message');
            
            if (validationSummary && validationErrors.length > 0) {
                const hasErrors = Array.from(validationErrors).some(error => error.textContent.trim() !== '');
                if (hasErrors) {
                    validationSummary.style.display = 'block';
                    const errorTexts = Array.from(validationErrors)
                        .filter(error => error.textContent.trim() !== '')
                        .map(error => error.textContent.trim());
                    document.getElementById('validation-summary-text').textContent = errorTexts.join(', ');
                }
            }

            // Real-time validation feedback
            const inputs = form.querySelectorAll('input[required]');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });
            });

            // Password confirmation validation
            if (confirmPasswordInput) {
                confirmPasswordInput.addEventListener('input', function() {
                    const password = passwordInput.value;
                    const confirmPassword = this.value;
                    const errorSpan = this.parentElement.parentElement.querySelector('.validation-message');
                    
                    if (confirmPassword && password !== confirmPassword) {
                        errorSpan.textContent = 'Passwords do not match';
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    } else if (confirmPassword && password === confirmPassword) {
                        errorSpan.textContent = '';
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }

            function validateField(field) {
                const errorSpan = field.parentElement.parentElement.querySelector('.validation-message');
                if (errorSpan) {
                    if (field.checkValidity()) {
                        errorSpan.textContent = '';
                        field.classList.remove('is-invalid');
                        field.classList.add('is-valid');
                    } else {
                        field.classList.remove('is-valid');
                        field.classList.add('is-invalid');
                    }
                }
            }
        });
    </script>
}