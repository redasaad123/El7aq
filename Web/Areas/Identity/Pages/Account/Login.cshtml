@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
}

<section class="form-container col-12" aria-label="Login Form Section">
    <div class="form-container-div col-4">
        <!-- Header with Logo -->
        <div class="auth-header">
            <div class="logo-container">
                <img src="~/images/elhaq.jpg" alt="El7aq Logo" class="auth-logo" />
                <h2>Welcome Back</h2>
                <p class="auth-subtitle">Sign in to your account to continue</p>
            </div>
        </div>

        <!-- Validation Summary -->
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert" style="display: none;">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <span id="validation-summary-text"></span>
        </div>

        <form id="account" method="post" novalidate>
            <!-- Email Field -->
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-envelope"></i>
                    </span>
                    <input asp-for="Input.Email" 
                           type="email" 
                           placeholder="Email Address" 
                           aria-label="Email Address" 
                           class="form-control" 
                           autocomplete="email"
                           required />
                </div>
                <span asp-validation-for="Input.Email" class="text-danger validation-message"></span>
            </div>

            <!-- Password Field -->
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <input asp-for="Input.Password" 
                           type="password" 
                           placeholder="Password" 
                           aria-label="Password" 
                           class="form-control" 
                           autocomplete="current-password"
                           required />
                    <button type="button" class="btn btn-outline-secondary" id="togglePassword" title="Show/Hide Password">
                        <i class="fas fa-eye" id="togglePasswordIcon"></i>
                    </button>
                </div>
                <span asp-validation-for="Input.Password" class="text-danger validation-message"></span>
            </div>

            <!-- Remember Me & Forgot Password -->
            <div class="form-options mb-4">
                <div class="form-check">
                    <input asp-for="Input.RememberMe" class="form-check-input" type="checkbox" id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>
                <a id="forgot-password" class="forgot-password" asp-page="./ForgotPassword">
                    Forgot your password?
                </a>
            </div>

            <!-- Submit Button -->
            <div class="form-group">
                <button id="login-submit" type="submit" class="btn btn-primary btn-lg w-100">
                    <span class="btn-text">Sign In</span>
                    <span class="btn-spinner" style="display: none;">
                        <i class="fas fa-spinner fa-spin me-2"></i>Signing in...
                    </span>
                </button>
            </div>

            <!-- Divider -->
            <div class="divider">
                <span>or</span>
            </div>

            <!-- Sign Up Link -->
            <div class="sub-text">
                Don't have an account? 
                <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl" class="signup-link">
                    Create Account
                </a>
            </div>

        </form>
    </div>
</section>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Password toggle functionality
            const togglePassword = document.getElementById('togglePassword');
            const passwordInput = document.querySelector('input[name="Input.Password"]');
            const togglePasswordIcon = document.getElementById('togglePasswordIcon');

            if (togglePassword && passwordInput) {
                togglePassword.addEventListener('click', function() {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);
                    togglePasswordIcon.classList.toggle('fa-eye');
                    togglePasswordIcon.classList.toggle('fa-eye-slash');
                });
            }

            // Form submission with loading state
            const form = document.getElementById('account');
            const submitButton = document.getElementById('login-submit');
            const btnText = document.querySelector('.btn-text');
            const btnSpinner = document.querySelector('.btn-spinner');

            if (form && submitButton) {
                form.addEventListener('submit', function() {
                    submitButton.disabled = true;
                    btnText.style.display = 'none';
                    btnSpinner.style.display = 'inline';
                });
            }

            // Show validation summary if there are errors
            const validationSummary = document.querySelector('.alert-danger');
            const validationErrors = document.querySelectorAll('.validation-message');
            
            if (validationSummary && validationErrors.length > 0) {
                const hasErrors = Array.from(validationErrors).some(error => error.textContent.trim() !== '');
                if (hasErrors) {
                    validationSummary.style.display = 'block';
                    const errorTexts = Array.from(validationErrors)
                        .filter(error => error.textContent.trim() !== '')
                        .map(error => error.textContent.trim());
                    document.getElementById('validation-summary-text').textContent = errorTexts.join(', ');
                }
            }

            // Real-time validation feedback
            const inputs = form.querySelectorAll('input[required]');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });
            });

            function validateField(field) {
                const errorSpan = field.parentElement.parentElement.querySelector('.validation-message');
                if (errorSpan) {
                    if (field.checkValidity()) {
                        errorSpan.textContent = '';
                        field.classList.remove('is-invalid');
                        field.classList.add('is-valid');
                    } else {
                        field.classList.remove('is-valid');
                        field.classList.add('is-invalid');
                    }
                }
            }
        });
    </script>
}
