@{
    ViewData["Title"] = "Book Your Trip";
}

<div class="booking-container">
    <div class="container">
        <!-- Header Section -->
        <header class="booking-header">
            <div class="weather-section">
                <div class="weather-info">
                    <span class="temperature">21°</span>
                    <span class="weather-icon">☀️</span>
                    <span class="feels-like">Feels like 22°</span>
                    <div class="weather-details">
                        <small>Clear</small>
                        <small>Precip: 0%</small>
                        <small>Humidity: 8%</small>
                        <small>Wind: 3 km/h</small>
                    </div>
                </div>
            </div>
            <div class="search-section">
                <div class="search-wrapper">
                    <input type="search" id="stationSearch" placeholder="Search stations" />
                    <i class="fas fa-search search-icon"></i>
                </div>
            </div>
        </header>

        <!-- Map Section -->
        <section class="map-section">
            <div class="map-container">
                <div class="map-placeholder">
                    <i class="fas fa-map-marked-alt"></i>
                    <span>Interactive Map</span>
                    <small>Google Maps integration coming soon</small>
                </div>
            </div>
        </section>

        <!-- Bus Stations Section -->
        <section class="stations-section">
            <h2 class="section-title">
                <i class="fas fa-bus"></i>
                Nearby Bus Stations
            </h2>

            <div class="stations-table">
                <div class="table-header">
                    <div class="header-cell">Station's Name</div>
                    <div class="header-cell">Bus</div>
                    <div class="header-cell">Seats Availability</div>
                    <div class="header-cell">Time Estimation</div>
                    <div class="header-cell">Route</div>
                    <div class="header-cell">Action</div>
                </div>

                <div class="table-body">
                    @if (ViewBag.StationData != null && ((List<object>)ViewBag.StationData).Any())
                    {
                        @foreach (dynamic station in (List<object>)ViewBag.StationData)
                        {
                            <div class="table-row" data-trip-id="@station.TripId">
                        <div class="table-cell" data-label="Station's Name">
                            <div class="station-info">
                                <i class="fas fa-map-marker-alt"></i>
                                        <span>@station.StationName</span>
                            </div>
                        </div>
                        <div class="table-cell" data-label="Bus">
                            <div class="bus-info">
                                <i class="fas fa-bus"></i>
                                        <span>@station.BusNumber</span>
                            </div>
                        </div>
                        <div class="table-cell" data-label="Seats Availability">
                            <div class="seats-info">
                                        <span class="available-seats">@station.AvailableSeats</span>
                                <small>seats left</small>
                            </div>
                        </div>
                        <div class="table-cell" data-label="Time Estimation">
                            <div class="time-info">
                                <i class="fas fa-clock"></i>
                                <span>15 min</span>
                            </div>
                        </div>
                        <div class="table-cell" data-label="Route">
                            <div class="route-info">
                                <i class="fas fa-route"></i>
                                        <span>@station.Route</span>
                            </div>
                        </div>
                        <div class="table-cell" data-label="Action">
                                    <button class="book-btn" type="button" data-trip-id="@station.TripId" data-price="@station.Price">
                                <i class="fas fa-ticket-alt"></i>
                                Book Now
                            </button>
                        </div>
                    </div>
                        }
                    }
                    else
                    {
                        <div class="no-data-message">
                            <i class="fas fa-info-circle"></i>
                            <p>No trips available from Mansoura stations at the moment</p>
                            <small>Please try again later or choose another station</small>
                        </div>
                    }
                </div>
            </div>
        </section>
    </div>
</div>

<style>
    /* Booking Page Styles */
    .booking-container {
        margin-top: 120px;
        min-height: calc(100vh - 120px);
        background: linear-gradient(135deg, var(--background) 0%, var(--white-bluish) 100%);
        padding: 2rem 0;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    /* Header Section */
    .booking-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(39, 170, 226, 0.1);
    }

    .weather-section {
        display: flex;
        align-items: center;
    }

    .weather-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .temperature {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-blue);
    }

    .weather-icon {
        font-size: 1.5rem;
    }

    .feels-like {
        font-weight: 600;
        color: var(--blackish-blue);
        margin-left: 0.5rem;
    }

    .weather-details {
        display: flex;
        flex-direction: column;
        margin-left: 1rem;
    }

        .weather-details small {
            font-size: 0.8rem;
            color: var(--text-light);
            line-height: 1.3;
        }

    .search-section {
        flex: 1;
        max-width: 400px;
        margin-left: 2rem;
    }

    .search-wrapper {
        position: relative;
    }

        .search-wrapper input {
            width: 100%;
            padding: 0.8rem 1rem 0.8rem 3rem;
            border: 2px solid var(--primary-blue);
            border-radius: 25px;
            background: var(--white-bluish);
            font-size: 1rem;
            color: var(--blackish-blue);
            transition: all 0.3s ease;
        }

            .search-wrapper input:focus {
                outline: none;
                border-color: var(--dark-blue);
                background: white;
                box-shadow: 0 0 0 3px rgba(39, 170, 226, 0.1);
            }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--primary-blue);
        font-size: 1rem;
    }

    /* Map Section */
    .map-section {
        margin-bottom: 2rem;
    }

    .map-container {
        width: 100%;
        height: 300px;
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-radius: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid var(--primary-blue);
        position: relative;
        overflow: hidden;
    }

    .map-placeholder {
        text-align: center;
        color: var(--primary-blue);
    }

        .map-placeholder i {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }

        .map-placeholder span {
            font-size: 1.5rem;
            font-weight: 600;
            display: block;
            margin-bottom: 0.5rem;
        }

        .map-placeholder small {
            font-size: 1rem;
            color: var(--text-light);
        }

    /* Stations Section */
    .stations-section {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(39, 170, 226, 0.1);
    }

    .section-title {
        color: var(--primary-blue);
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .section-title i {
            font-size: 1.5rem;
        }

    /* Table Styles */
    .stations-table {
        width: 100%;
    }

    .table-header {
        display: grid;
        grid-template-columns: 2fr 1fr 1.5fr 1fr 2fr 1fr;
        gap: 1rem;
        padding: 1rem 0;
        border-bottom: 2px solid var(--primary-blue);
        margin-bottom: 1rem;
    }

    .header-cell {
        font-weight: 700;
        color: var(--blackish-blue);
        font-size: 1rem;
        text-align: center;
    }

    .table-body {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .table-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1.5fr 1fr 2fr 1fr;
        gap: 1rem;
        background: var(--white-bluish);
        padding: 1.5rem 1rem;
        border-radius: 12px;
        align-items: center;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .table-row:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(39, 170, 226, 0.15);
            border-color: var(--primary-blue);
        }

    .table-cell {
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .station-info,
    .bus-info,
    .time-info,
    .route-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: var(--blackish-blue);
    }

        .station-info i,
        .bus-info i,
        .time-info i,
        .route-info i {
            color: var(--primary-blue);
            font-size: 1rem;
        }

    .seats-info {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .available-seats {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--primary-blue);
    }

    .seats-info small {
        font-size: 0.8rem;
        color: var(--text-light);
    }

    .book-btn {
        background: linear-gradient(135deg, var(--primary-blue), var(--dark-blue));
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 4px 15px rgba(39, 170, 226, 0.3);
    }

        .book-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(39, 170, 226, 0.4);
        }

        .book-btn i {
            font-size: 0.9rem;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .booking-header {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .search-section {
            margin-left: 0;
            max-width: 100%;
        }

        .table-header {
            display: none;
        }

        .table-row {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            padding: 1.5rem;
        }

        .table-cell {
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(39, 170, 226, 0.1);
        }

            .table-cell:last-child {
                border-bottom: none;
                justify-content: center;
                padding-top: 1rem;
            }

            .table-cell::before {
                content: attr(data-label);
                font-weight: 600;
                color: var(--primary-blue);
                flex: 1;
                text-align: left;
            }

        .station-info,
        .bus-info,
        .time-info,
        .route-info {
            justify-content: flex-end;
        }

        .seats-info {
            align-items: flex-end;
        }
    }

    @@media (max-width: 480px) {
        .container {
            padding: 0 1rem;
        }

        .booking-container {
            margin-top: 100px;
        }

        .weather-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.25rem;
        }

        .temperature {
            font-size: 1.5rem;
        }

        .map-container {
            height: 200px;
        }

        .map-placeholder i {
            font-size: 2rem;
        }

        .map-placeholder span {
            font-size: 1.2rem;
        }
    }

    /* No Data Message */
    .no-data-message {
        text-align: center;
        padding: 3rem 2rem;
        color: var(--text-light);
    }

    .no-data-message i {
        font-size: 3rem;
        color: var(--primary-blue);
        margin-bottom: 1rem;
        display: block;
    }

    .no-data-message p {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--blackish-blue);
    }

    .no-data-message small {
        font-size: 1rem;
        color: var(--text-light);
    }
    /* Dark mode styles for Booking page */
    [data-theme="dark"] .booking-container {
        background: var(--background) !important;
    }

    [data-theme="dark"] .stations-section {
        background: #2D2D2D !important;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3) !important;
    }

    [data-theme="dark"] .stations-section h3 {
        color: var(--text-dark) !important;
    }

    [data-theme="dark"] .table-row {
        background: #3D3D3D !important;
        border-color: rgba(79, 195, 247, 0.1) !important;
    }

    [data-theme="dark"] .table-row:hover {
        background: #4D4D4D !important;
        box-shadow: 0 8px 25px rgba(79, 195, 247, 0.2) !important;
    }

    [data-theme="dark"] .station-info,
    [data-theme="dark"] .bus-info,
    [data-theme="dark"] .time-info,
    [data-theme="dark"] .route-info {
        color: var(--text-dark) !important;
    }

    [data-theme="dark"] .price-info {
        color: var(--primary-blue) !important;
    }

    [data-theme="dark"] .book-btn {
        background: linear-gradient(135deg, var(--primary-blue), var(--dark-blue)) !important;
    }

    [data-theme="dark"] .book-btn:hover {
        background: linear-gradient(135deg, var(--dark-blue), var(--primary-blue)) !important;
    }

    /* Dark mode styles for header section */
    [data-theme="dark"] .booking-header {
        background: #2D2D2D !important;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3) !important;
    }

    [data-theme="dark"] .weather-info {
        color: var(--text-dark) !important;
    }

    [data-theme="dark"] .weather-info .temperature {
        color: var(--text-dark) !important;
    }

    [data-theme="dark"] .weather-info .feels-like {
        color: var(--text-light) !important;
    }

    [data-theme="dark"] .weather-details small {
        color: var(--text-light) !important;
    }

    [data-theme="dark"] .search-wrapper input {
        background: #3D3D3D !important;
        color: var(--text-dark) !important;
        border-color: rgba(79, 195, 247, 0.3) !important;
    }

    [data-theme="dark"] .search-wrapper input::placeholder {
        color: var(--text-light) !important;
    }

    [data-theme="dark"] .search-wrapper input:focus {
        border-color: var(--primary-blue) !important;
        box-shadow: 0 0 0 3px rgba(79, 195, 247, 0.1) !important;
    }

    [data-theme="dark"] .search-icon {
        color: var(--text-light) !important;
    }

    /* Dark mode styles for map section */
    [data-theme="dark"] .map-container {
        background: #2D2D2D !important;
        border-color: rgba(79, 195, 247, 0.1) !important;
    }

    [data-theme="dark"] .map-placeholder {
        color: var(--text-light) !important;
    }

    [data-theme="dark"] .map-placeholder span {
        color: var(--text-dark) !important;
    }

    [data-theme="dark"] .map-placeholder small {
        color: var(--text-light) !important;
    }

    /* Dark mode styles for table header */
    [data-theme="dark"] .table-header {
        background: #3D3D3D !important;
        color: var(--text-dark) !important;
    }

    /* Dark mode styles for section title */
    [data-theme="dark"] .section-title {
        color: var(--text-dark) !important;
    }
</style>

@section Scripts {
    <script>
        let map;
        let userLocation = null;
        let stationMarkers = [];

        // Get trip data from the server
        const tripData = @Html.Raw(Json.Serialize(ViewBag.StationData ?? new List<object>()));
        
        // Convert server data to map format for Google Maps
        const busStations = tripData.map(trip => ({
            name: trip.stationName,
            position: { lat: trip.latitude, lng: trip.longitude },
            bus: trip.busNumber,
            seats: trip.availableSeats,
            time: "15 min", // Default time estimation
            route: trip.route,
            tripId: trip.tripId,
            price: trip.price
        }));

        function initMap() {
            // Default center (Mansoura, Egypt)
            const defaultCenter = { lat: 31.0409, lng: 31.3785 };

            // Initialize the map
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: defaultCenter,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                styles: [
                    {
                        featureType: "poi",
                        elementType: "labels",
                        stylers: [{ visibility: "off" }]
                    }
                ]
            });

            // Add station markers
            addStationMarkers();

            // Set up event listeners
            setupMapControls();

            // Try to get user's current location
            getCurrentLocation();
        }

        function addStationMarkers() {
            busStations.forEach((station, index) => {
                const marker = new google.maps.Marker({
                    position: station.position,
                    map: map,
                    title: station.name,
                    icon: {
                        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                            <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="20" cy="20" r="18" fill="#27AAE2" stroke="white" stroke-width="2"/>
                                <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial" font-size="16" font-weight="bold">🚌</text>
                            </svg>
                        `),
                        scaledSize: new google.maps.Size(40, 40),
                        anchor: new google.maps.Point(20, 20)
                    }
                });

                const infoWindow = new google.maps.InfoWindow({
                    content: `
                        <div style="padding: 10px; min-width: 200px;">
                            <h3 style="margin: 0 0 10px 0; color: #27AAE2; font-size: 16px;">${station.name}</h3>
                            <p style="margin: 5px 0; font-size: 14px;"><strong>Bus:</strong> ${station.bus}</p>
                            <p style="margin: 5px 0; font-size: 14px;"><strong>Seats Available:</strong> ${station.seats}</p>
                            <p style="margin: 5px 0; font-size: 14px;"><strong>Time:</strong> ${station.time}</p>
                            <p style="margin: 5px 0; font-size: 14px;"><strong>Route:</strong> ${station.route}</p>
                            <p style="margin: 5px 0; font-size: 14px;"><strong>Price:</strong> ${station.price} EGP</p>
                            <button onclick="bookStation('${station.name}', '${station.tripId}')" style="
                                background: linear-gradient(135deg, #27AAE2, #1e7bb8);
                                color: white;
                                border: none;
                                padding: 8px 16px;
                                border-radius: 20px;
                                cursor: pointer;
                                font-weight: 600;
                                margin-top: 10px;
                                width: 100%;
                            ">Book Now</button>
                        </div>
                    `
                });

                marker.addListener("click", () => {
                    infoWindow.open(map, marker);
                });

                stationMarkers.push({ marker, infoWindow, station });
            });
        }

        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        // Add user location marker
                        const userMarker = new google.maps.Marker({
                            position: userLocation,
                            map: map,
                            title: "Your Location",
                            icon: {
                                url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                                    <svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg">
                                        <circle cx="15" cy="15" r="12" fill="#FF6B6B" stroke="white" stroke-width="2"/>
                                        <circle cx="15" cy="15" r="6" fill="white"/>
                                    </svg>
                                `),
                                scaledSize: new google.maps.Size(30, 30),
                                anchor: new google.maps.Point(15, 15)
                            }
                        });

                        // Center map on user location
                        map.setCenter(userLocation);
                        map.setZoom(15);
                    },
                    (error) => {
                        console.log("Error getting location:", error);
                        // Keep default center if location access is denied
                    }
                );
            }
        }

        function setupMapControls() {
            // Locate Me button
            document.getElementById('locateMe').addEventListener('click', () => {
                if (userLocation) {
                    map.setCenter(userLocation);
                    map.setZoom(15);
                } else {
                    getCurrentLocation();
                }
            });

            // Center Map button
            document.getElementById('centerMap').addEventListener('click', () => {
                const bounds = new google.maps.LatLngBounds();
                stationMarkers.forEach(({ marker }) => {
                    bounds.extend(marker.getPosition());
                });
                if (userLocation) {
                    bounds.extend(userLocation);
                }
                map.fitBounds(bounds);
            });
        }

        function bookStation(stationName, tripId) {
            // Find the corresponding table row and trigger booking
            const stationRows = document.querySelectorAll('.table-row');
            stationRows.forEach(row => {
                if (row.getAttribute('data-trip-id') === tripId) {
                    const bookBtn = row.querySelector('.book-btn');
                    if (bookBtn) {
                        bookBtn.click();
                    }
                }
            });
        }

        // Add click handlers to existing book buttons
        document.addEventListener('DOMContentLoaded', function() {
            const bookButtons = document.querySelectorAll('.book-btn');
            bookButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tripId = this.getAttribute('data-trip-id');
                    const price = this.getAttribute('data-price');
                    
                    if (confirm(`هل تريد حجز هذه الرحلة بسعر ${price} جنيه؟`)) {
                        // Redirect to booking confirmation
                        window.location.href = `/Passenger/TripDetails/${tripId}`;
                    }
                });
            });
        });
    </script>
}